Component:
-----------------------------------------
folder // add a new folder
----
/server

.html
----

.ts
----
import { Component } from '@angular/core';

@Component({
    selector: 'app-server',
    templateUrl: './server.component.html'
})

export class ServerComponent {
}

app.module.ts // add the component in the module
----
import { ServerComponent } from './server/server.component'; // add new import

@NgModule({
    declarations: [
        AppComponent,
        ServerComponent // declare new component
    ],
    // ...
})

app.component.html
----
<serverComponent></serverComponent> // then use like html element 





Data Binding:
-----------------------------------------
1. String interpolation
    <p>{{ displayText }}</p>
2. Property binding
    <button [disabled]="buttonStatus"></button>
3. Event binding
    <button (click)="onCreateNew()"></button>
4. Two-way data binding
    <input [(ngModel)]="productName"></input>





Component Property Binding:
-----------------------------------------
Host component:
----
.html:
<child-component *ngFor="let item of collection"  [childElement]="item"></child-component>

Child component:
----
.html:
<p>{{ element.name }}</p>

.ts:
import { ..., Input } from '@angular/core';

export class ChildComponent {
    @Input('childElement') element: { name: string };  // childElement is an alias and therefore is optional
}





Component Event Binding:
-----------------------------------------
Emittant component:
----
.html:
<input (click)="buttonClicked()">

.ts:
import { ..., EventEmitter, Output } from '@angular/core';

export class child {
    @Output(newItemCreated) itemCreated = new EventEmitter<{ name: string }>();  // newItemCreated is an alias and therefore is optional

    buttonClicked() {
        this.itemCreated.emit({ name: this.name });
    }
}

Listener component:
----
.html:
<child-element (newItemCreated)="onItemAdded($event)"></child-element>

.ts:
onItemAdded(itemData: { name: string }) {
    this.items.push({ name:  itemData.name });
}





Local reference:
---------
.html:
<input type="text" #itemInput>
<button (click)="onItemAdded(itemInput)"></button>

.ts:
onItemAdded(itemInput: HTMLInputElement) {
    console.log(itemInput.value);
}





ViewChild:
------------------------------
.html:
<input type="text" #itemInput>

.ts:
import { ...,  ViewChild, ElementRef} from '@angular/core';
@ViewChild('itemInput') itemInput: ElementRef;
console.log(this.itemInput.nativeElement.value); // use only to read some value, don't write to it





ng-content
----------------------------
child component:
----
.html:
<ng-content></ng-content>

host component:
----
<app-element>
    <p>{{ item.name }}</p> // this gets rendered in the ng-content block
</app-element>





ContentChild
----------------------------
child component:
----
.html:
<ng-content></ng-content>

.ts:
import { ...,  ContentChild, ElementRef} from '@angular/core';
@ContentChild('contentParagraph') contentElement: ElementRef;
console.log(this.itemInput.contentElement.textContent); // use only to read some value, don't write to it

host component:
----
<app-element>
    <p #contentParagraph>{{ item.name }}</p> // this gets rendered in the ng-content block
</app-element>





Component Lifecycle:
-----------------------------------
- ngOnChanges
- ngOnInit
- ngDoCheck
- ngAfterContentInit
- ngAfterContentChecked
- ngAfterViewInit
- ngAfterViewChecked
- ngOnDestroy





Directives:
-----------------------------------------
Structural Directives: (add or remove element)
-----
*ngIf:   // * is needed for structural directives
<p *ngIf="serverCreated; else noServer">Server created</p>
<ng-template #noServer>
    <p>No server created!</p>
</ng-template>

*ngFor:
<app-server *ngFor="let server of servers; let i = index"></app-server>

Attribute Directives: (change element structure)
----
ngStyle:
<p [ngStyle]="{'background-color': getColor()}"></p>
OR
<p [ngStyle]="{backgroundColor: getColor()}"></p>

ngClass:
<p [ngClass]="{online: serverStatus === 'online'}"></p>    // .online { ... }

ngSwitch:
<div [ngSwitch]="value">
    <p *ngSwitchCase="5">Value is 5</p>
    <p *ngSwitchCase="10">Value is 10</p>
    <p *ngSwitchCase="100">Value is 100</p>
    <p *ngSwitchDefault>Value is Default</p>
</div>





Custom Attribute Directive
--------------------------------------------------
folder:
/highlight

.ts: (highlight.directive.ts)
import { Directive, OnInit, Renderer2, HostListener, HostBinding, Input } from '@angular/core';

@Directive({
    selector: '[highlight]'
})
// can be done as:
// won't work in non-browser scenarios
export class HighlightDirective implements OnInit {
    constructor(private elementRef: ElementRef) {  // private makes it a property of this class
    }
    ngOnInit() {
        this.elementRef.nativeElement.style.backgroundColor = 'green';
    }
}

// but should be done as:
export class HighlightDirective implements OnInit {
    @Input() defaultColor: string = 'transparent';
    @Input() highlightColor: string = 'blue';
    @HostBinding('style.backgroundColor') backgroundColor: string;
    constructor(private elementRef: ElementRef, private renderer: Renderer2) {  // private makes it a property of this class
    }
    ngOnInit() {
        this.backgroundColor = this.defaultColor;
        this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', this.highlightColor);
    }
    // listen to event
    @HostListener('mouseenter') mouseover(eventData: Event) {
        this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', this.highlightColor);
        // OR
        this.backgroundColor = 'blue'; // using HostBinding
    }
    @HostListener('mouseleave') mouseleave(eventData: Event) {
         this.renderer.setStyle(this.elementRef.nativeElement, 'background-color', this.defaultColor);
        // OR
        this.backgroundColor = 'transparent'; // using HostBinding
    }
}

app.module.ts // add the directive in the module
----
import { HighlightDirective } from '../highlight/highlight.directive'; // add new import

@NgModule({
    declarations: [
        AppComponent,
        HighlightDirective // declare new directive
    ],
    // ...
})

app.component.html
----
<p highlight [defaultColor]="'yellow'" [highlightColor]="'red'">Style me with highlight directive!</p>
OR
<p highlight defaultColor="yellow" highlightColor="red">Style me with highlight directive!</p>





Custom Structural Directive
--------------------------------------------------
.ts:
export class UnlessDirective {
    @Input() set unless(condition: boolean) {
        if (!condition) {
            this.vcRef.createEmbeddedView(this.templateRef);
        } else {
            this.vcRef.clear();
        }
    }
    constructor(private templateRef: templateRef<any>, private vcRef ViewContainerRef) {  }
}

.html:
<p *unless="serverCreated; else noServer">Server created</p>
